import { singleton } from 'tsyringe';
import { Logger } from '../../base/utils/logger';
import { BrowserWindow, app, nativeImage, screen } from 'electron';
import { ConfigProvider } from '../../base/utils/config.provider';
import * as path from 'node:path';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

/**
 * Shows a simple browser window and loads the `workspaces\electron-app\src\windows\splashscreen\index.html`.
 * The browser window automatically adjusts to the client screen size.
 */
@singleton()
export class SplashscreenWindowProvider {
  private _window?: BrowserWindow;

  get window() {
    return this._window;
  }

  constructor(protected configProvider: ConfigProvider) {
    Logger.verbose(`[SplashscreenWindow] constructor called`);
  }

  async init(): Promise<BrowserWindow> {
    const window = await this.configureWindow();
    this.configureRenderer();

    return window;
  }

  private async configureWindow(): Promise<BrowserWindow> {
    const { width, height } = screen.getPrimaryDisplay().workAreaSize;
    const divisor = 4;
    const screenSize = width > height ? height / divisor : width / divisor;

    this._window = new BrowserWindow({
      height: screenSize,
      width: screenSize,
      minWidth: screenSize,
      minHeight: screenSize,
      maxWidth: screenSize,
      maxHeight: screenSize,
      center: true,
      show: true,
      frame: false,
      resizable: false,
      transparent: true,
      icon: this.loadIcon(),
      backgroundColor: '#00FFFFFF',
      webPreferences: {
        preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      },
    });
    this._window.center();

    this._window.setAlwaysOnTop(true);
    this._window.show();
    this._window.setAlwaysOnTop(false);
    app.focus();

    return Promise.resolve(this._window);
  }

  private configureRenderer(): void {
    if (!app.isPackaged) {
      // Dev mode, take advantage of the live reload by loading local URL
      this._window
        ?.loadFile(
          'workspaces/electron-app/src/windows/splashscreen/index.html'
        )
        .catch((error: Error) => {
          Logger.error(
            `[SplashscreenWindowProvider#configureRenderer] Failed to load DEV url `,
            error
          );
        });
    } else {
      // Else mode, load splash screen bundle
      const indexPath = path.join(
        __dirname,
        '../renderer/splashscreen_window/index.html'
      );
      this._window?.loadURL(`file://${indexPath}`).catch((error: Error) => {
        Logger.error(
          `[SplashscreenWindowProvider#configureRenderer] Failed to load PROD index.html file `,
          error
        );
      });
    }

    Logger.debug(
      `[MainWindow#configureRenderer] openDevTools: ${this.configProvider.appConfig.openDevTools}`
    );
    if (this.configProvider.appConfig.openDevTools) {
      this._window?.on('ready-to-show', () => {
        this.openDevTools();
      });
    }

    // When the window is closed`
    this._window?.on('closed', () => {
      // Delete current reference
      delete this._window;
    });
  }

  private openDevTools(): void {
    this._window?.webContents.openDevTools();
    this._window?.webContents.on('devtools-opened', () => {
      this._window?.focus();
      setImmediate(() => {
        this._window?.focus();
      });
    });
  }

  private loadIcon(): Electron.NativeImage | undefined {
    let iconObject;
    if (this.configProvider.appConfig.isIconAvailable) {
      const iconPath = path.join(__dirname, 'icons/icon.png');
      Logger.debug('Icon Path', iconPath);
      iconObject = nativeImage.createFromPath(iconPath);
      // Change dock icon on MacOS
      if (iconObject && process.platform === 'darwin') {
        app.dock.setIcon(iconObject);
      }
    }
    return iconObject;
  }
}
